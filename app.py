import streamlit as st
import pandas as pd
import numpy as np
import openpyxl
import io
import tempfile
import os
import re
import base64
from fuzzywuzzy import fuzz

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
import marketplace_detection

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64
def get_image_base64(image_path):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É base64 –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ HTML"""
    with open(image_path, "rb") as img_file:
        return base64.b64encode(img_file.read()).decode('utf-8')
from utils import (
    load_excel_file, 
    save_excel_file, 
    map_columns_automatically, 
    transfer_data_between_tables,
    preview_data,
    find_header_row,
    detect_marketplace_template,
    find_best_marketplace_sheet
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ú–∞–ø–ø–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤",
    page_icon="üìä",
    layout="wide"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–µ—Å—Å–∏–∏
if 'source_file' not in st.session_state:
    st.session_state.source_file = None
if 'target_file' not in st.session_state:
    st.session_state.target_file = None
if 'source_data' not in st.session_state:
    st.session_state.source_data = None
if 'target_data' not in st.session_state:
    st.session_state.target_data = None
if 'source_columns' not in st.session_state:
    st.session_state.source_columns = None
if 'target_columns' not in st.session_state:
    st.session_state.target_columns = None
if 'column_mapping' not in st.session_state:
    st.session_state.column_mapping = {}
if 'mapping_complete' not in st.session_state:
    st.session_state.mapping_complete = False
if 'transfer_complete' not in st.session_state:
    st.session_state.transfer_complete = False
if 'auto_mapped' not in st.session_state:
    st.session_state.auto_mapped = False
if 'source_sheet_name' not in st.session_state:
    st.session_state.source_sheet_name = None
if 'target_sheet_name' not in st.session_state:
    st.session_state.target_sheet_name = None
if 'source_sheets' not in st.session_state:
    st.session_state.source_sheets = []
if 'target_sheets' not in st.session_state:
    st.session_state.target_sheets = []
if 'source_workbook' not in st.session_state:
    st.session_state.source_workbook = None
if 'target_workbook' not in st.session_state:
    st.session_state.target_workbook = None
if 'preview_result' not in st.session_state:
    st.session_state.preview_result = None
if 'source_header_row' not in st.session_state:
    st.session_state.source_header_row = 1
if 'target_header_row' not in st.session_state:
    st.session_state.target_header_row = 1

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
st.title("üîÑ –ú–∞–ø–ø–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤")
st.caption("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —à–∞–±–ª–æ–Ω–∞–º–∏ —Ç–∞–±–ª–∏—Ü –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤")


st.divider()

# –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
col1, col2 = st.columns(2)

with col1:
    st.subheader("üì§ –ò—Å—Ö–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–û—Ç–∫—É–¥–∞)")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø—ã –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω —Ä—è–¥ –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏
    st.write(
        f'<span style="display: inline-block;"><img src="data:image/png;base64,{get_image_base64("attached_assets/xlsx.png")}" width="18" style="margin-right:4px"></span>'
        f'<span style="display: inline-block;"><img src="data:image/png;base64,{get_image_base64("attached_assets/wildberries.png")}" width="18" style="margin-right:4px"></span>'
        f'<span style="display: inline-block;"><img src="data:image/png;base64,{get_image_base64("attached_assets/ozon.png")}" width="18" style="margin-right:4px"></span>'
        f'<span style="display: inline-block;"><img src="data:image/png;base64,{get_image_base64("attached_assets/–Ø–Ω–¥–µ–∫—Å –º–∞—Ä–∫–µ—Ç.png")}" width="18" style="margin-right:4px"></span>'
        f'<span style="display: inline-block;"><img src="data:image/png;base64,{get_image_base64("attached_assets/–õ–µ–º–∞–Ω–∞ –ø—Ä–æ.png")}" width="18" style="margin-right:4px"></span>'
        f'<span style="display: inline-block;"><img src="data:image/png;base64,{get_image_base64("attached_assets/–≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.png")}" width="18" style="margin-right:4px"></span>'
        f'<span style="display: inline-block;"><img src="data:image/png;base64,{get_image_base64("attached_assets/—Å–±–µ—Ä–º–µ–≥–∞–º–∞—Ä–∫–µ—Ç.png")}" width="18" style="margin-right:4px"></span>',
        unsafe_allow_html=True
    )
    
    source_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É (xlsx)", type=['xlsx'], key="source_uploader")
    
    if source_file is not None and source_file != st.session_state.source_file:
        st.session_state.source_file = source_file
        try:
            source_workbook, source_sheets = load_excel_file(source_file)
            st.session_state.source_workbook = source_workbook
            st.session_state.source_sheets = source_sheets
            
            if len(source_sheets) > 0:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
                selected_sheet = source_sheets[0]
                header_row = 1
                
                # –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è –Ω–∏—Ö –ª–∏—Å—Ç—ã –∏ —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                marketplace_config = {
                    'ozon': {
                        'sheet_patterns': ['—à–∞–±–ª–æ–Ω', 'template', '–æ–∑–æ–Ω', 'ozon'],
                        'header_row': 2
                    },
                    'wildberries': {
                        'sheet_patterns': ['—Ç–æ–≤–∞—Ä—ã', '–≤–±', 'wb', 'wildberries'],
                        'header_row': 3
                    },
                    'lemanpro': {
                        'sheet_patterns': ['–ª–µ–º–∞–Ω', '–∞—Ç–µ–º', 'leman', 'atem'],
                        'header_row': 4
                    },
                    'yandex': {
                        'sheet_patterns': ['–¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö', '—è–Ω–¥–µ–∫—Å', '–º–∞—Ä–∫–µ—Ç', '—è–Ω–¥–µ–∫—Å –º–∞—Ä–∫–µ—Ç', 'yandex'],
                        'header_row': 2
                    }
                }
                
                # –®–∞–≥ 1: –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ª–∏—Å—Ç –ø–æ –∏–º–µ–Ω–∏
                sheet_found = False
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –õ–µ–º–∞–Ω–ü—Ä–æ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                source_filename = getattr(source_file, 'name', '')
                if source_filename:
                    # –î–ª—è –õ–µ–º–∞–Ω–ü—Ä–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞
                    file_base_name = os.path.splitext(os.path.basename(source_filename))[0]
                    
                    for sheet_name in source_sheets:
                        # –ò—â–µ–º –ª–∏—Å—Ç, –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å "—à–∞–±–ª–æ–Ω" –∏ –∏–º—è —Ñ–∞–π–ª–∞
                        # –∏–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è –õ–µ–º–∞–Ω–ü—Ä–æ –∏–º–µ–Ω–∞
                        if ("—à–∞–±–ª–æ–Ω" in sheet_name.lower() and file_base_name.lower() in sheet_name.lower()) or \
                           any(pattern in sheet_name.lower() for pattern in ["–∞—Ç–µ–º", "atem", "–ª–µ–º–∞–Ω"]):
                            selected_sheet = sheet_name
                            header_row = 4  # –î–ª—è –õ–µ–º–∞–Ω–ü—Ä–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∞ 4-—è —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                            marketplace_type = 'lemanpro'
                            sheet_found = True
                            break
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –õ–µ–º–∞–Ω–ü—Ä–æ, –∏—â–µ–º –¥—Ä—É–≥–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã
                if not sheet_found:
                    for sheet_name in source_sheets:
                        sheet_lower = sheet_name.lower()
                        for marketplace, config in marketplace_config.items():
                            if any(pattern in sheet_lower for pattern in config['sheet_patterns']):
                                selected_sheet = sheet_name
                                header_row = config['header_row']
                                marketplace_type = marketplace
                                sheet_found = True
                                break
                        if sheet_found:
                            break
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏—Å—Ç –∏ —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                st.session_state.source_sheet_name = selected_sheet
                st.session_state.source_header_row = header_row
                
                # –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
                sheet = source_workbook[selected_sheet]
                if sheet.max_row >= header_row:
                    # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    headers = []
                    for cell in sheet[header_row]:
                        if cell.value is not None and str(cell.value).strip() != "":
                            headers.append(str(cell.value))
                    
                    # –®–∞–≥ 3: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä–æ–∫–∏ –∏ –ø–µ—Ä–≤—ã—Ö 5 –∫–æ–ª–æ–Ω–æ–∫
                    if headers:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                        normalized_columns = [str(h).lower().strip() for h in headers]
                        marketplace_type, confidence, details = marketplace_detection.detect_marketplace_by_row_headers(
                            normalized_columns, 
                            st.session_state.source_header_row
                        )
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞ "–î–∞–Ω–Ω—ã–µ" –¥–ª—è "–í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
                        sheet_name_lower = selected_sheet.lower()
                        if '–¥–∞–Ω–Ω—ã–µ' in sheet_name_lower and st.session_state.source_header_row == 2:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —à–∞–±–ª–æ–Ω –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                            has_guid = any('guid*' in col.lower() for col in normalized_columns[:5])
                            if has_guid and '–∫–æ–¥ —Ç–Ω –≤—ç–¥' in ' '.join(normalized_columns[:5]).lower():
                                marketplace_type = 'vseinstrumenty'
                                confidence = 95.0
                                st.write("‚ö†Ô∏è DEBUG: –û–±–Ω–∞—Ä—É–∂–µ–Ω —à–∞–±–ª–æ–Ω –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ GUID* –∏ –∫–æ–¥—É –¢–ù –í–≠–î")
                        
                        if marketplace_type != 'other' and confidence > 80:
                            st.session_state.source_marketplace = marketplace_type
                            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                            st.markdown(f"<div style='font-size: 0.7rem; color: #aaa;'>DEBUG: {marketplace_type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%)</div>", unsafe_allow_html=True)
                            
                            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø–æ —Ç–∏–ø—É –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
                            if marketplace_type == 'ozon' and st.session_state.source_header_row != 2:
                                st.write(f"‚ö†Ô∏è DEBUG: –û–±–Ω–∞—Ä—É–∂–µ–Ω Ozon, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ 2")
                                st.session_state.source_header_row = 2
                                if "ozon_header_adjusted" not in st.session_state:
                                    st.session_state.ozon_header_adjusted = True
                                    st.rerun()
                            elif marketplace_type == 'wildberries' and st.session_state.source_header_row != 3:
                                st.write(f"‚ö†Ô∏è DEBUG: –û–±–Ω–∞—Ä—É–∂–µ–Ω Wildberries, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ 3")
                                st.session_state.source_header_row = 3
                                if "wb_header_adjusted" not in st.session_state:
                                    st.session_state.wb_header_adjusted = True
                                    st.rerun()
                            elif marketplace_type == 'lemanpro' and st.session_state.source_header_row != 4:
                                st.write(f"‚ö†Ô∏è DEBUG: –û–±–Ω–∞—Ä—É–∂–µ–Ω –õ–µ–º–∞–Ω–ü—Ä–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ 4")
                                st.session_state.source_header_row = 4
                                if "lemanpro_header_adjusted" not in st.session_state:
                                    st.session_state.lemanpro_header_adjusted = True
                                    st.rerun()
                            # –ï—Å–ª–∏ —É –Ω–∞—Å –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç, –Ω—É–∂–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –≤ –∫–∞–∫–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (2 –∏–ª–∏ 4)
                            elif marketplace_type == 'yandex':
                                # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ 4-–π —Å—Ç—Ä–æ–∫–µ –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
                                sheet = source_workbook[selected_sheet]
                                yandex_header_row = 2  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç—Ä–æ–∫–∞ 2
                                
                                if sheet.max_row >= 4:
                                    row_values_4 = [str(cell.value).strip().lower() if cell.value else '' for cell in sheet[4]]
                                    if any('–≤–∞—à sku' in val for val in row_values_4) or any('–∫–∞—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–∫–∏' in val for val in row_values_4):
                                        yandex_header_row = 4
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                                if st.session_state.source_header_row != yandex_header_row:
                                    st.write(f"‚ö†Ô∏è DEBUG: –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –≤ —Å—Ç—Ä–æ–∫–µ {yandex_header_row}, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º")
                                    st.session_state.source_header_row = yandex_header_row
                                    if "yandex_header_adjusted" not in st.session_state:
                                        st.session_state.yandex_header_adjusted = True
                                        st.rerun()
            else:
                st.error("–í –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤!")
                st.session_state.source_data = None
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}")
            st.session_state.source_data = None
    
    if st.session_state.source_workbook is not None and st.session_state.source_sheets:
        col1a, col1b = st.columns([3, 1])
        with col1a:
            selected_source_sheet = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ", 
                st.session_state.source_sheets,
                index=st.session_state.source_sheets.index(st.session_state.source_sheet_name) if st.session_state.source_sheet_name in st.session_state.source_sheets else 0
            )
        
        with col1b:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            source_header_row = st.number_input(
                "–°—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤",
                min_value=1,
                max_value=20,
                value=st.session_state.source_header_row,
                step=1,
                key="source_header_input"
            )
        
        if selected_source_sheet != st.session_state.source_sheet_name or source_header_row != st.session_state.source_header_row:
            st.session_state.source_sheet_name = selected_source_sheet
            st.session_state.source_header_row = source_header_row
            st.session_state.auto_mapped = False
            st.session_state.mapping_complete = False
            st.session_state.transfer_complete = False
        
        try:
            sheet = st.session_state.source_workbook[st.session_state.source_sheet_name]
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—Ç—Ä–æ–∫—É)
            header_row = st.session_state.source_header_row
            headers = []
            column_indices = []
            
            # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –∏—Ö –∏–Ω–¥–µ–∫—Å—ã
            for i, cell in enumerate(sheet[header_row]):
                if cell.value is not None and str(cell.value).strip() != "":
                    headers.append(str(cell.value))
                    column_indices.append(i)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
            unique_headers = {}
            for i, header in enumerate(headers):
                if header in unique_headers:
                    # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
                    counter = 1
                    new_header = f"{header}_{counter}"
                    while new_header in unique_headers:
                        counter += 1
                        new_header = f"{header}_{counter}"
                    headers[i] = new_header
                unique_headers[headers[i]] = True
                
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            data = []
            for row in sheet.iter_rows(min_row=header_row + 1, values_only=True):
                if any(cell is not None for cell in row):
                    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                    row_data = [row[idx] for idx in column_indices]
                    data.append(row_data)
            
            # –°–æ–∑–¥–∞–µ–º DataFrame —Ç–æ–ª—å–∫–æ —Å –Ω–µ–ø—É—Å—Ç—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            df = pd.DataFrame(data, columns=headers)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            df = df.astype(str)
            
            st.session_state.source_data = df
            st.session_state.source_columns = headers
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            st.write("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:")
            st.dataframe(df.head(5))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
            if st.session_state.source_columns:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –õ–µ–º–∞–Ω–ü—Ä–æ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                lemanpro_detected = False
                
                # –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ GUID –≤ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö –¥–∞–Ω–Ω—ã—Ö
                if st.session_state.source_header_row == 1:
                    # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    st.write(f"‚ö†Ô∏è DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫—É 1 –Ω–∞ –õ–µ–º–∞–Ω–ü—Ä–æ")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º "GUID"
                    if st.session_state.source_data is not None and not st.session_state.source_data.empty:
                        first_rows = st.session_state.source_data.head(5).astype(str)
                        # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫
                        st.write(f"‚ö†Ô∏è DEBUG: –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {first_rows.values.tolist()}")
                        
                        for _, row in first_rows.iterrows():
                            row_text = " ".join(row.values).lower()
                            # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            st.write(f"‚ö†Ô∏è DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç: {row_text[:50]}...")
                            
                            if "guid" in row_text or "–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑ 1—Å" in row_text:
                                lemanpro_detected = True
                                marketplace = "lemanpro"
                                confidence = 95.0
                                st.write(f"‚ö†Ô∏è DEBUG: –û–±–Ω–∞—Ä—É–∂–µ–Ω –õ–µ–º–∞–Ω–ü—Ä–æ –ø–æ GUID!")
                                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ 4 –∏ –¥–µ–ª–∞–µ–º rerun –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                                st.session_state.source_header_row = 4
                                st.write(f"‚ö†Ô∏è DEBUG: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –õ–µ–º–∞–Ω–ü—Ä–æ –Ω–∞ 4")
                                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                                if "lemanpro_header_adjusted" not in st.session_state:
                                    st.session_state.lemanpro_header_adjusted = True
                                    st.rerun()
                                break
                                
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞–≤–Ω–∞ 4, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –õ–µ–º–∞–Ω–ü—Ä–æ –∏–ª–∏ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
                elif st.session_state.source_header_row == 4:
                    # –£–±–∏—Ä–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    
                    # –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
                    yandex_reference_headers = [
                        '–≤–∞—à sku *', '–∫–∞—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–∫–∏', '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é',
                        '–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ *', '—Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤', 
                        '—à—Ç—Ä–∏—Ö–∫–æ–¥ *', '—Ç–∏–ø —É—Ü–µ–Ω–∫–∏', '–≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Ç–æ–≤–∞—Ä–∞', '–æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–≤–∞—Ä–∞',
                        '–≤–µ—Å, –∫–≥'
                    ]
                    
                    # –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –õ–µ–º–∞–Ω–ü—Ä–æ
                    lemanpro_reference_headers = [
                        'guid', '–∫–æ–¥ —Ç–Ω –≤—ç–¥', '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –º–µ—Ä—á–∞–Ω—Ç–∞', 
                        '–±—Ä–µ–Ω–¥ —Ç–æ–≤–∞—Ä–∞', '–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å', '–≤–µ—Å —É–ø–∞–∫–æ–≤–∫–∏, –∫–≥', 
                        '–≥–∞–±–∞—Ä–∏—Ç—ã —É–ø–∞–∫–æ–≤–∫–∏, —Å–º'
                    ]
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    normalized_columns = [str(col).lower() for col in st.session_state.source_columns]
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                    yandex_matches = sum(1 for header in yandex_reference_headers if any(header.lower() in col for col in normalized_columns))
                    lemanpro_matches = sum(1 for header in lemanpro_reference_headers if any(header.lower() in col for col in normalized_columns))
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                    if lemanpro_matches >= 2 or any('guid' in col for col in normalized_columns):
                        lemanpro_detected = True
                        marketplace = "lemanpro"
                        confidence = 95.0
                    elif yandex_matches >= 2:
                        marketplace = "yandex"
                        confidence = 95.0
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞–≤–Ω–∞ 2, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å Ozon –∏–ª–∏ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
                elif st.session_state.source_header_row == 2:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ Ozon –∏ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç–∞
                    ozon_indicators = ['–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*', '—Å—Å—ã–ª–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ*', '–∞—Ä—Ç–∏–∫—É–ª*', '–±—Ä–µ–Ω–¥*', '–Ω–¥—Å, %*', '—Ü–µ–Ω–∞, —Ä—É–±.*', '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ']
                    yandex_indicators = ['–≤–∞—à sku *', '–∫–∞—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–∫–∏', '—Ñ–∏–¥', '—Ç–æ–≤–∞—Ä', '—Ü–µ–Ω–∞']
                    
                    normalized_columns = [str(col).lower() for col in st.session_state.source_columns]
                    normalized_text = ' '.join(normalized_columns)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ - Ozon —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–º–µ–Ω–Ω–æ "–®–∞–±–ª–æ–Ω"
                    is_ozon_sheet = False
                    if hasattr(st.session_state, 'source_sheet_name') and "—à–∞–±–ª–æ–Ω" in str(st.session_state.source_sheet_name).lower():
                        is_ozon_sheet = True
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
                    is_yandex_sheet = False
                    if hasattr(st.session_state, 'source_sheet_name'):
                        is_yandex_sheet = "–¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä" in str(st.session_state.source_sheet_name).lower()
                    
                    # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–ê OZON –ü–û –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ú –ü–†–ò–ó–ù–ê–ö–ê–ú
                    is_definitely_ozon = (
                        any('–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ' in col for col in normalized_columns) or
                        any('—Ü–µ–Ω–∞, —Ä—É–±*' in col for col in normalized_columns) or
                        any('–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*' in col for col in normalized_columns) or
                        any('—Å—Å—ã–ª–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ*' in col for col in normalized_columns) or
                        any('—Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ' in col for col in normalized_columns)
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–≤–µ–∑–¥–æ—á–µ–∫ (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è Ozon)
                    asterisk_count = sum(1 for col in normalized_columns if '*' in col)
                    
                    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
                    found_ozon = 0
                    found_yandex = 0
                    
                    for col in normalized_columns:
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Ozon
                        for indicator in ozon_indicators:
                            if indicator in col:
                                found_ozon += 1
                                break
                                
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
                        for indicator in yandex_indicators:
                            if indicator in col:
                                found_yandex += 1
                                break
                    
                    # –û—Å–æ–±—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ Ozon
                    has_ozon_links = any('—Å—Å—ã–ª–∫–∞ –Ω–∞' in col for col in normalized_columns)
                    has_ozon_price = any('—Ü–µ–Ω–∞, —Ä—É–±' in col for col in normalized_columns)
                    
                    # –û—Å–æ–±—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
                    has_yandex_sku = any('–≤–∞—à sku' in col for col in normalized_columns)
                    has_quality = any('–∫–∞—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–∫–∏' in col for col in normalized_columns)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
                    is_yandex_pattern = (
                        ("–≤–∞—à sku" in normalized_text and "–∫–∞—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–∫–∏" in normalized_text) or
                        ("–≤–∞—à sku *" in normalized_text) or
                        (any('param_ids' in col for col in normalized_columns) and any('param_names' in col for col in normalized_columns))
                    )
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                    if is_definitely_ozon or (found_ozon >= 2) or (is_ozon_sheet and found_ozon >= 1) or (asterisk_count >= 3 and has_ozon_links):
                        marketplace = "ozon"
                        confidence = 95.0
                    elif is_yandex_pattern or (found_yandex >= 1) or (is_yandex_sheet) or has_yandex_sku or has_quality:
                        marketplace = "yandex"
                        confidence = 95.0
                    else:
                        # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                        marketplace, confidence = detect_marketplace_template(st.session_state.source_columns)
                else:
                    marketplace, confidence = detect_marketplace_template(st.session_state.source_columns)
                    
                if marketplace != 'other':
                    if marketplace == 'wildberries':
                        mp_name = "Wildberries"
                        mp_color = "purple"
                        marketplace_icon = "attached_assets/wildberries.png"
                    elif marketplace == 'ozon':
                        mp_name = "Ozon"
                        mp_color = "blue"
                        marketplace_icon = "attached_assets/ozon.png"
                    elif marketplace == 'lemanpro':
                        mp_name = "–õ–µ–º–∞–Ω–ü—Ä–æ"
                        mp_color = "green"
                        marketplace_icon = "attached_assets/–õ–µ–º–∞–Ω–∞ –ø—Ä–æ.png"
                    elif marketplace == 'yandex':
                        mp_name = "–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç"
                        mp_color = "orange"
                        marketplace_icon = "attached_assets/–Ø–Ω–¥–µ–∫—Å –º–∞—Ä–∫–µ—Ç.png"
                    else:
                        mp_name = marketplace.capitalize()
                        mp_color = "gray"
                        marketplace_icon = "attached_assets/xlsx.png"
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã
                        if "—Å–±–µ—Ä" in marketplace.lower():
                            marketplace_icon = "attached_assets/—Å–±–µ—Ä–º–µ–≥–∞–º–∞—Ä–∫–µ—Ç.png"
                        elif "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç" in marketplace.lower():
                            marketplace_icon = "attached_assets/–≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.png"
                    
                    st.caption(f'<span style="display: inline-block;"><img src="data:image/png;base64,{get_image_base64(marketplace_icon)}" width="20" style="margin-right:5px"></span> –†–∞—Å–ø–æ–∑–Ω–∞–Ω —à–∞–±–ª–æ–Ω: <span style="color:{mp_color};font-weight:bold;">{mp_name}</span> (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%)', unsafe_allow_html=True)
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}")
            st.session_state.source_data = None

with col2:
    st.subheader("üì• –¶–µ–ª–µ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–ö—É–¥–∞)")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø—ã –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω —Ä—è–¥ –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏
    st.write(
        f'<span style="display: inline-block;"><img src="data:image/png;base64,{get_image_base64("attached_assets/xlsx.png")}" width="18" style="margin-right:4px"></span>'
        f'<span style="display: inline-block;"><img src="data:image/png;base64,{get_image_base64("attached_assets/ozon.png")}" width="18" style="margin-right:4px"></span>'
        f'<span style="display: inline-block;"><img src="data:image/png;base64,{get_image_base64("attached_assets/wildberries.png")}" width="18" style="margin-right:4px"></span>'
        f'<span style="display: inline-block;"><img src="data:image/png;base64,{get_image_base64("attached_assets/–Ø–Ω–¥–µ–∫—Å –º–∞—Ä–∫–µ—Ç.png")}" width="18" style="margin-right:4px"></span>'
        f'<span style="display: inline-block;"><img src="data:image/png;base64,{get_image_base64("attached_assets/—Å–±–µ—Ä–º–µ–≥–∞–º–∞—Ä–∫–µ—Ç.png")}" width="18" style="margin-right:4px"></span>'
        f'<span style="display: inline-block;"><img src="data:image/png;base64,{get_image_base64("attached_assets/–≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.png")}" width="18" style="margin-right:4px"></span>'
        f'<span style="display: inline-block;"><img src="data:image/png;base64,{get_image_base64("attached_assets/–õ–µ–º–∞–Ω–∞ –ø—Ä–æ.png")}" width="18" style="margin-right:4px"></span>',
        unsafe_allow_html=True
    )
    
    target_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ç–∞–±–ª–∏—Ü—É (xlsx)", type=['xlsx'], key="target_uploader")
    
    if target_file is not None and target_file != st.session_state.target_file:
        st.session_state.target_file = target_file
        try:
            target_workbook, target_sheets = load_excel_file(target_file)
            st.session_state.target_workbook = target_workbook
            st.session_state.target_sheets = target_sheets
            
            if len(target_sheets) > 0:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
                selected_sheet = target_sheets[0]
                header_row = 1
                
                # –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è –Ω–∏—Ö –ª–∏—Å—Ç—ã –∏ —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                marketplace_config = {
                    'ozon': {
                        'sheet_patterns': ['—à–∞–±–ª–æ–Ω', 'template', '–æ–∑–æ–Ω', 'ozon'],
                        'header_row': 2
                    },
                    'wildberries': {
                        'sheet_patterns': ['—Ç–æ–≤–∞—Ä—ã', '–≤–±', 'wb', 'wildberries'],
                        'header_row': 3
                    },
                    'lemanpro': {
                        'sheet_patterns': ['–ª–µ–º–∞–Ω', '–∞—Ç–µ–º', 'leman', 'atem'],
                        'header_row': 4
                    },
                    'yandex': {
                        'sheet_patterns': ['–¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö', '—è–Ω–¥–µ–∫—Å', '–º–∞—Ä–∫–µ—Ç', '—è–Ω–¥–µ–∫—Å –º–∞—Ä–∫–µ—Ç', 'yandex'],
                        'header_row': 2
                    }
                }
                
                # –®–∞–≥ 1: –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ª–∏—Å—Ç –ø–æ –∏–º–µ–Ω–∏
                sheet_found = False
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –õ–µ–º–∞–Ω–ü—Ä–æ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                target_filename = getattr(target_file, 'name', '')
                if target_filename:
                    # –î–ª—è –õ–µ–º–∞–Ω–ü—Ä–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞
                    file_base_name = os.path.splitext(os.path.basename(target_filename))[0]
                    
                    for sheet_name in target_sheets:
                        # –ò—â–µ–º –ª–∏—Å—Ç, –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å "—à–∞–±–ª–æ–Ω" –∏ –∏–º—è —Ñ–∞–π–ª–∞
                        # –∏–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è –õ–µ–º–∞–Ω–ü—Ä–æ –∏–º–µ–Ω–∞
                        if ("—à–∞–±–ª–æ–Ω" in sheet_name.lower() and file_base_name.lower() in sheet_name.lower()) or \
                           any(pattern in sheet_name.lower() for pattern in ["–∞—Ç–µ–º", "atem", "–ª–µ–º–∞–Ω"]):
                            selected_sheet = sheet_name
                            header_row = 4  # –î–ª—è –õ–µ–º–∞–Ω–ü—Ä–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∞ 4-—è —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                            marketplace_type = 'lemanpro'
                            sheet_found = True
                            break
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –õ–µ–º–∞–Ω–ü—Ä–æ, –∏—â–µ–º –¥—Ä—É–≥–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã
                if not sheet_found:
                    for sheet_name in target_sheets:
                        sheet_lower = sheet_name.lower()
                        for marketplace, config in marketplace_config.items():
                            if any(pattern in sheet_lower for pattern in config['sheet_patterns']):
                                selected_sheet = sheet_name
                                header_row = config['header_row']
                                marketplace_type = marketplace
                                sheet_found = True
                                break
                        if sheet_found:
                            break
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏—Å—Ç –∏ —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                st.session_state.target_sheet_name = selected_sheet
                st.session_state.target_header_row = header_row
                
                # –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
                sheet = target_workbook[selected_sheet]
                if sheet.max_row >= header_row:
                    # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    headers = []
                    for cell in sheet[header_row]:
                        if cell.value is not None and str(cell.value).strip() != "":
                            headers.append(str(cell.value))
                    
                    # –®–∞–≥ 3: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä–æ–∫–∏ –∏ –ø–µ—Ä–≤—ã—Ö 5 –∫–æ–ª–æ–Ω–æ–∫
                    if headers:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                        normalized_columns = [str(h).lower().strip() for h in headers]
                        marketplace_type, confidence, details = marketplace_detection.detect_marketplace_by_row_headers(
                            normalized_columns, 
                            st.session_state.target_header_row
                        )
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ª–∏—Å—Ç–∞ "–î–∞–Ω–Ω—ã–µ" –¥–ª—è "–í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
                        sheet_name_lower = selected_sheet.lower()
                        if '–¥–∞–Ω–Ω—ã–µ' in sheet_name_lower and st.session_state.target_header_row == 2:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —à–∞–±–ª–æ–Ω –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
                            has_guid = any('guid*' in col.lower() for col in normalized_columns[:5])
                            if has_guid and '–∫–æ–¥ —Ç–Ω –≤—ç–¥' in ' '.join(normalized_columns[:5]).lower():
                                marketplace_type = 'vseinstrumenty'
                                confidence = 95.0
                                st.write("‚ö†Ô∏è DEBUG: –û–±–Ω–∞—Ä—É–∂–µ–Ω —à–∞–±–ª–æ–Ω –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (—Ü–µ–ª–µ–≤–æ–π) –ø–æ GUID* –∏ –∫–æ–¥—É –¢–ù –í–≠–î")
                        
                        if marketplace_type != 'other' and confidence > 80:
                            st.session_state.target_marketplace = marketplace_type
                            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                            st.markdown(f"<div style='font-size: 0.7rem; color: #aaa;'>DEBUG: {marketplace_type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%)</div>", unsafe_allow_html=True)
                            
                            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø–æ —Ç–∏–ø—É –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                            if marketplace_type == 'ozon' and st.session_state.target_header_row != 2:
                                st.write(f"‚ö†Ô∏è DEBUG: –û–±–Ω–∞—Ä—É–∂–µ–Ω Ozon, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ü–µ–ª–µ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ 2")
                                st.session_state.target_header_row = 2
                                if "target_ozon_header_adjusted" not in st.session_state:
                                    st.session_state.target_ozon_header_adjusted = True
                                    st.rerun()
                            # –ï—Å–ª–∏ —É –Ω–∞—Å –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç, –Ω—É–∂–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –≤ –∫–∞–∫–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (2 –∏–ª–∏ 4)
                            elif marketplace_type == 'yandex':
                                # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ 4-–π —Å—Ç—Ä–æ–∫–µ –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
                                sheet = target_workbook[selected_sheet]
                                yandex_header_row = 2  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç—Ä–æ–∫–∞ 2
                                
                                if sheet.max_row >= 4:
                                    row_values_4 = [str(cell.value).strip().lower() if cell.value else '' for cell in sheet[4]]
                                    if any('–≤–∞—à sku' in val for val in row_values_4) or any('–∫–∞—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–∫–∏' in val for val in row_values_4):
                                        yandex_header_row = 4
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                                if st.session_state.target_header_row != yandex_header_row:
                                    st.write(f"‚ö†Ô∏è DEBUG: –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –≤ —Å—Ç—Ä–æ–∫–µ {yandex_header_row}, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º")
                                    st.session_state.target_header_row = yandex_header_row
                                    if "target_yandex_header_adjusted" not in st.session_state:
                                        st.session_state.target_yandex_header_adjusted = True
                                        st.rerun()
                            elif marketplace_type == 'wildberries' and st.session_state.target_header_row != 3:
                                st.write(f"‚ö†Ô∏è DEBUG: –û–±–Ω–∞—Ä—É–∂–µ–Ω Wildberries, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ü–µ–ª–µ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ 3")
                                st.session_state.target_header_row = 3
                                if "target_wb_header_adjusted" not in st.session_state:
                                    st.session_state.target_wb_header_adjusted = True
                                    st.rerun()
                            elif marketplace_type == 'lemanpro' and st.session_state.target_header_row != 4:
                                st.write(f"‚ö†Ô∏è DEBUG: –û–±–Ω–∞—Ä—É–∂–µ–Ω –õ–µ–º–∞–Ω–ü—Ä–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ü–µ–ª–µ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ 4")
                                st.session_state.target_header_row = 4
                                if "target_lemanpro_header_adjusted" not in st.session_state:
                                    st.session_state.target_lemanpro_header_adjusted = True
                                    st.rerun()
            else:
                st.error("–í —Ü–µ–ª–µ–≤–æ–º —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤!")
                st.session_state.target_data = None
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}")
            st.session_state.target_data = None
    
    if st.session_state.target_workbook is not None and st.session_state.target_sheets:
        col2a, col2b = st.columns([3, 1])
        with col2a:
            selected_target_sheet = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç –≤ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ", 
                st.session_state.target_sheets,
                index=st.session_state.target_sheets.index(st.session_state.target_sheet_name) if st.session_state.target_sheet_name in st.session_state.target_sheets else 0
            )
        
        with col2b:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            target_header_row = st.number_input(
                "–°—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤",
                min_value=1,
                max_value=20,
                value=st.session_state.target_header_row,
                step=1,
                key="target_header_input"
            )
        
        if selected_target_sheet != st.session_state.target_sheet_name or target_header_row != st.session_state.target_header_row:
            st.session_state.target_sheet_name = selected_target_sheet
            st.session_state.target_header_row = target_header_row
            st.session_state.auto_mapped = False
            st.session_state.mapping_complete = False
            st.session_state.transfer_complete = False
        
        try:
            sheet = st.session_state.target_workbook[st.session_state.target_sheet_name]
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—Ç—Ä–æ–∫—É)
            header_row = st.session_state.target_header_row
            headers = []
            column_indices = []
            
            # –°–æ–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –∏—Ö –∏–Ω–¥–µ–∫—Å—ã
            for i, cell in enumerate(sheet[header_row]):
                if cell.value is not None and str(cell.value).strip() != "":
                    headers.append(str(cell.value))
                    column_indices.append(i)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
            unique_headers = {}
            for i, header in enumerate(headers):
                if header in unique_headers:
                    # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
                    counter = 1
                    new_header = f"{header}_{counter}"
                    while new_header in unique_headers:
                        counter += 1
                        new_header = f"{header}_{counter}"
                    headers[i] = new_header
                unique_headers[headers[i]] = True
                
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            data = []
            for row in sheet.iter_rows(min_row=header_row + 1, values_only=True):
                if any(cell is not None for cell in row):
                    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                    row_data = [row[idx] for idx in column_indices]
                    data.append(row_data)
            
            # –°–æ–∑–¥–∞–µ–º DataFrame —Ç–æ–ª—å–∫–æ —Å –Ω–µ–ø—É—Å—Ç—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            df = pd.DataFrame(data, columns=headers)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            df = df.astype(str)
            
            st.session_state.target_data = df
            st.session_state.target_columns = headers
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
            st.write("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã:")
            st.dataframe(df.head(5))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
            if st.session_state.target_columns:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –õ–µ–º–∞–Ω–ü—Ä–æ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                lemanpro_detected = False
                
                # –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ GUID –≤ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö –¥–∞–Ω–Ω—ã—Ö
                if st.session_state.target_header_row == 1:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º "GUID"
                    if st.session_state.target_data is not None and not st.session_state.target_data.empty:
                        first_rows = st.session_state.target_data.head(5).astype(str)
                        for _, row in first_rows.iterrows():
                            row_text = " ".join(row.values).lower()
                            if "guid" in row_text or "–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑ 1—Å" in row_text:
                                lemanpro_detected = True
                                marketplace = "lemanpro"
                                confidence = 95.0
                                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ 4 –∏ –¥–µ–ª–∞–µ–º rerun –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                                st.session_state.target_header_row = 4
                                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                                if "target_lemanpro_header_adjusted" not in st.session_state:
                                    st.session_state.target_lemanpro_header_adjusted = True
                                    st.rerun()
                                break
                                
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞–≤–Ω–∞ 4, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –õ–µ–º–∞–Ω–ü—Ä–æ –∏–ª–∏ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
                elif st.session_state.target_header_row == 4:
                    normalized_columns = [str(col).lower() for col in st.session_state.target_columns]
                    
                    # –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
                    yandex_reference_headers = [
                        '–≤–∞—à sku *', '–∫–∞—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–∫–∏', '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é',
                        '–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ *', '—Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤', 
                        '—à—Ç—Ä–∏—Ö–∫–æ–¥ *', '—Ç–∏–ø —É—Ü–µ–Ω–∫–∏', '–≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ —Ç–æ–≤–∞—Ä–∞', '–æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–≤–∞—Ä–∞',
                        '–≤–µ—Å, –∫–≥'
                    ]
                    
                    # –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –õ–µ–º–∞–Ω–ü—Ä–æ
                    lemanpro_reference_headers = [
                        'guid', '–∫–æ–¥ —Ç–Ω –≤—ç–¥', '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –º–µ—Ä—á–∞–Ω—Ç–∞', 
                        '–±—Ä–µ–Ω–¥ —Ç–æ–≤–∞—Ä–∞', '–∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å', '–≤–µ—Å —É–ø–∞–∫–æ–≤–∫–∏, –∫–≥', 
                        '–≥–∞–±–∞—Ä–∏—Ç—ã —É–ø–∞–∫–æ–≤–∫–∏, —Å–º'
                    ]
                    
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                    yandex_matches = sum(1 for header in yandex_reference_headers if any(header.lower() in col for col in normalized_columns))
                    lemanpro_matches = sum(1 for header in lemanpro_reference_headers if any(header.lower() in col for col in normalized_columns))
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                    if lemanpro_matches >= 2 or any('guid' in col for col in normalized_columns):
                        lemanpro_detected = True
                        marketplace = "lemanpro"
                        confidence = 95.0
                    elif yandex_matches >= 2:
                        marketplace = "yandex"
                        confidence = 95.0
                
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞–≤–Ω–∞ 2, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å Ozon –∏–ª–∏ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
                elif st.session_state.target_header_row == 2:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ Ozon –∏ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç–∞
                    ozon_indicators = ['–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*', '—Å—Å—ã–ª–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ*', '–∞—Ä—Ç–∏–∫—É–ª*', '–±—Ä–µ–Ω–¥*', '–Ω–¥—Å, %*', '—Ü–µ–Ω–∞, —Ä—É–±.*', '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ']
                    yandex_indicators = ['–≤–∞—à sku *', '–∫–∞—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–∫–∏', '—Ñ–∏–¥', '—Ç–æ–≤–∞—Ä', '—Ü–µ–Ω–∞']
                    
                    normalized_columns = [str(col).lower() for col in st.session_state.target_columns]
                    normalized_text = ' '.join(normalized_columns)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ - Ozon —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–º–µ–Ω–Ω–æ "–®–∞–±–ª–æ–Ω"
                    is_ozon_sheet = False
                    if hasattr(st.session_state, 'target_sheet_name') and "—à–∞–±–ª–æ–Ω" in str(st.session_state.target_sheet_name).lower():
                        is_ozon_sheet = True
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
                    is_yandex_sheet = False
                    if hasattr(st.session_state, 'target_sheet_name'):
                        is_yandex_sheet = "–¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä" in str(st.session_state.target_sheet_name).lower()
                    
                    # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–ê OZON –ü–û –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ú –ü–†–ò–ó–ù–ê–ö–ê–ú
                    is_definitely_ozon = (
                        any('–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ' in col for col in normalized_columns) or
                        any('—Ü–µ–Ω–∞, —Ä—É–±*' in col for col in normalized_columns) or
                        any('–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*' in col for col in normalized_columns) or
                        any('—Å—Å—ã–ª–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ —Ñ–æ—Ç–æ*' in col for col in normalized_columns) or
                        any('—Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ' in col for col in normalized_columns)
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–≤–µ–∑–¥–æ—á–µ–∫ (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è Ozon)
                    asterisk_count = sum(1 for col in normalized_columns if '*' in col)
                    
                    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
                    found_ozon = 0
                    found_yandex = 0
                    
                    for col in normalized_columns:
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Ozon
                        for indicator in ozon_indicators:
                            if indicator in col:
                                found_ozon += 1
                                break
                                
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
                        for indicator in yandex_indicators:
                            if indicator in col:
                                found_yandex += 1
                                break
                    
                    # –û—Å–æ–±—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ Ozon
                    has_ozon_links = any('—Å—Å—ã–ª–∫–∞ –Ω–∞' in col for col in normalized_columns)
                    has_ozon_price = any('—Ü–µ–Ω–∞, —Ä—É–±' in col for col in normalized_columns)
                    
                    # –û—Å–æ–±—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
                    has_yandex_sku = any('–≤–∞—à sku' in col for col in normalized_columns)
                    has_quality = any('–∫–∞—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–∫–∏' in col for col in normalized_columns)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
                    is_yandex_pattern = (
                        ("–≤–∞—à sku" in normalized_text and "–∫–∞—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–∫–∏" in normalized_text) or
                        ("–≤–∞—à sku *" in normalized_text) or
                        (any('param_ids' in col for col in normalized_columns) and any('param_names' in col for col in normalized_columns))
                    )
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                    if is_definitely_ozon or (found_ozon >= 2) or (is_ozon_sheet and found_ozon >= 1) or (asterisk_count >= 3 and has_ozon_links):
                        marketplace = "ozon"
                        confidence = 95.0
                    elif is_yandex_pattern or (found_yandex >= 1) or (is_yandex_sheet) or has_yandex_sku or has_quality:
                        marketplace = "yandex"
                        confidence = 95.0
                    else:
                        # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                        marketplace, confidence = detect_marketplace_template(st.session_state.target_columns)
                
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ä–∞–≤–Ω–∞ 3, –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ Wildberries
                elif st.session_state.target_header_row == 3:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö –¥–ª—è WB –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                    wb_indicators = ['–∞—Ä—Ç–∏–∫—É–ª wb', '–±–∞—Ä–∫–æ–¥', '–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–Ω–æ–º–µ—Ä –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã', '—Å—Ç–∞–≤–∫–∞ –Ω–¥—Å', '–ø—Ä–µ–¥–º–µ—Ç']
                    normalized_columns = [str(col).lower() for col in st.session_state.target_columns]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –¥–ª—è WB
                    is_wb_sheet = False
                    if hasattr(st.session_state, 'target_sheet_name'):
                        is_wb_sheet = "—Ç–æ–≤–∞—Ä—ã" in str(st.session_state.target_sheet_name).lower()
                    
                    # –°—á–µ—Ç—á–∏–∫ –¥–ª—è WB
                    found_wb = 0
                    for col in normalized_columns:
                        for indicator in wb_indicators:
                            if indicator in col:
                                found_wb += 1
                                break
                    
                    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ WB
                    has_wb_features = any('–∞—Ä—Ç–∏–∫—É–ª wb' in col for col in normalized_columns) or any('–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä' in col for col in normalized_columns)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
                    if is_wb_sheet or found_wb >= 1 or has_wb_features:
                        marketplace = "wildberries"
                        confidence = 95.0
                    else:
                        marketplace, confidence = detect_marketplace_template(st.session_state.target_columns)
                
                # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ—Å–æ–±—ã—Ö —É—Å–ª–æ–≤–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                else:
                    marketplace, confidence = detect_marketplace_template(st.session_state.target_columns)
                
                if marketplace != 'other':
                    if marketplace == 'wildberries':
                        mp_name = "Wildberries"
                        mp_color = "purple"
                        marketplace_icon = "attached_assets/wildberries.png"
                    elif marketplace == 'ozon':
                        mp_name = "Ozon"
                        mp_color = "blue"
                        marketplace_icon = "attached_assets/ozon.png"
                    elif marketplace == 'lemanpro':
                        mp_name = "–õ–µ–º–∞–Ω–ü—Ä–æ"
                        mp_color = "green"
                        marketplace_icon = "attached_assets/–õ–µ–º–∞–Ω–∞ –ø—Ä–æ.png"
                    elif marketplace == 'yandex':
                        mp_name = "–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç"
                        mp_color = "orange"
                        marketplace_icon = "attached_assets/–Ø–Ω–¥–µ–∫—Å –º–∞—Ä–∫–µ—Ç.png"
                    else:
                        mp_name = marketplace.capitalize()
                        mp_color = "gray"
                        marketplace_icon = "attached_assets/xlsx.png"
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã
                        if "—Å–±–µ—Ä" in marketplace.lower():
                            marketplace_icon = "attached_assets/—Å–±–µ—Ä–º–µ–≥–∞–º–∞—Ä–∫–µ—Ç.png"
                        elif "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç" in marketplace.lower():
                            marketplace_icon = "attached_assets/–≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.png"
                    
                    st.caption(f'<span style="display: inline-block;"><img src="data:image/png;base64,{get_image_base64(marketplace_icon)}" width="20" style="margin-right:5px"></span> –†–∞—Å–ø–æ–∑–Ω–∞–Ω —à–∞–±–ª–æ–Ω: <span style="color:{mp_color};font-weight:bold;">{mp_name}</span> (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%)', unsafe_allow_html=True)
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}")
            st.session_state.target_data = None

st.divider()

# –†–∞–∑–¥–µ–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏ —Ä—É—á–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞
if st.session_state.source_data is not None and st.session_state.target_data is not None:
    st.header("üîÑ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞
    if not st.session_state.auto_mapped:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
        source_marketplace = "other"
        target_marketplace = "other"
        
        if hasattr(st.session_state, 'source_columns'):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é detect_marketplace_template
            source_marketplace, confidence = detect_marketplace_template(st.session_state.source_columns)
            
            # –ï—Å–ª–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è, –ø—Ä–æ–±—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if source_marketplace == "other" or confidence < 80:
                sheet_name = st.session_state.source_sheet_name if hasattr(st.session_state, 'source_sheet_name') else ""
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –ª–∏—Å—Ç–∞
                sheet_name_lower = sheet_name.lower()
                if "—à–∞–±–ª–æ–Ω" in sheet_name_lower:
                    source_marketplace = "ozon"
                elif "—Ç–æ–≤–∞—Ä—ã" in sheet_name_lower:
                    source_marketplace = "wildberries"
                elif "–¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö" in sheet_name_lower:
                    source_marketplace = "yandex"
                elif "–ª–µ–º–∞–Ω" in sheet_name_lower or "atem" in sheet_name_lower or "–∞—Ç–µ–º" in sheet_name_lower:
                    source_marketplace = "lemanpro"
        
        if hasattr(st.session_state, 'target_columns'):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é detect_marketplace_template
            target_marketplace, confidence = detect_marketplace_template(st.session_state.target_columns)
            
            # –ï—Å–ª–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è, –ø—Ä–æ–±—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if target_marketplace == "other" or confidence < 80:
                sheet_name = st.session_state.target_sheet_name if hasattr(st.session_state, 'target_sheet_name') else ""
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –ª–∏—Å—Ç–∞
                sheet_name_lower = sheet_name.lower()
                if "—à–∞–±–ª–æ–Ω" in sheet_name_lower:
                    target_marketplace = "ozon"
                elif "—Ç–æ–≤–∞—Ä—ã" in sheet_name_lower:
                    target_marketplace = "wildberries"
                elif "–¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö" in sheet_name_lower:
                    target_marketplace = "yandex"
                elif "–ª–µ–º–∞–Ω" in sheet_name_lower or "atem" in sheet_name_lower or "–∞—Ç–µ–º" in sheet_name_lower:
                    target_marketplace = "lemanpro"
        
        mapping_icon_source = "attached_assets/xlsx.png"
        mapping_icon_target = "attached_assets/xlsx.png"
        
        # –í—ã–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ —Ü–µ–ª–∏
        if source_marketplace == 'wildberries':
            mapping_icon_source = "attached_assets/wildberries.png"
        elif source_marketplace == 'ozon':
            mapping_icon_source = "attached_assets/ozon.png"
        elif source_marketplace == 'lemanpro':
            mapping_icon_source = "attached_assets/–õ–µ–º–∞–Ω–∞ –ø—Ä–æ.png"
        elif "—è–Ω–¥–µ–∫—Å" in source_marketplace.lower():
            mapping_icon_source = "attached_assets/–Ø–Ω–¥–µ–∫—Å –º–∞—Ä–∫–µ—Ç.png"
        
        if target_marketplace == 'wildberries':
            mapping_icon_target = "attached_assets/wildberries.png"
        elif target_marketplace == 'ozon':
            mapping_icon_target = "attached_assets/ozon.png"
        elif target_marketplace == 'lemanpro':
            mapping_icon_target = "attached_assets/–õ–µ–º–∞–Ω–∞ –ø—Ä–æ.png"
        elif "—è–Ω–¥–µ–∫—Å" in target_marketplace.lower():
            mapping_icon_target = "attached_assets/–Ø–Ω–¥–µ–∫—Å –º–∞—Ä–∫–µ—Ç.png"
            
        # HTML –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –∫–Ω–æ–ø–∫–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è
        if st.button(f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫", use_container_width=True):
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫..."):
                st.session_state.column_mapping = map_columns_automatically(
                    st.session_state.source_columns,
                    st.session_state.target_columns
                )
                st.session_state.auto_mapped = True
                st.rerun()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞
    if st.session_state.auto_mapped:
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
        all_target_columns = ["–ù–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å"] + list(st.session_state.target_columns)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∏ –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ
        auto_mapped_columns = []
        unmapped_columns = []
        
        for src_col in st.session_state.source_columns:
            if src_col in st.session_state.column_mapping:
                auto_mapped_columns.append(src_col)
            else:
                unmapped_columns.append(src_col)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        with st.form(key="mapping_form"):
            st.markdown("### ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:")
            st.caption("–°–ª–µ–≤–∞ - –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø—Ä–∞–≤–∞ - –≤—ã–±–æ—Ä —Ü–µ–ª–µ–≤—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.")
            
            # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            for src_col in auto_mapped_columns:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞
                current_mapping = st.session_state.column_mapping.get(src_col, None)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
                selected_idx = 0
                if current_mapping is not None:
                    try:
                        selected_idx = all_target_columns.index(current_mapping)
                    except ValueError:
                        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
                        all_target_columns.append(current_mapping)
                        selected_idx = len(all_target_columns) - 1
                
                # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
                cols = st.columns([3, 3])
                with cols[0]:
                    st.markdown(f"**{src_col}**", help="–ò—Å—Ö–æ–¥–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞")
                with cols[1]:
                    mapping = st.selectbox(
                        "–¶–µ–ª–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞", 
                        options=all_target_columns,
                        index=selected_idx,
                        key=f"auto_map_{src_col}",
                        label_visibility="collapsed"
                    )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥
                if mapping != "–ù–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å":
                    st.session_state.column_mapping[src_col] = mapping
                elif src_col in st.session_state.column_mapping:
                    del st.session_state.column_mapping[src_col]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
            st.divider()
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            if unmapped_columns:
                st.markdown("### ‚ùå –ù–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:")
                st.caption("–î–ª—è —ç—Ç–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª–µ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞.")
                
                # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –¥–ª—è –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                for src_col in unmapped_columns:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å None)
                    current_mapping = st.session_state.column_mapping.get(src_col, None)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
                    selected_idx = 0
                    if current_mapping is not None:
                        try:
                            selected_idx = all_target_columns.index(current_mapping)
                        except ValueError:
                            all_target_columns.append(current_mapping)
                            selected_idx = len(all_target_columns) - 1
                    
                    # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
                    cols = st.columns([3, 3])
                    with cols[0]:
                        st.markdown(f"**{src_col}**", help="–ò—Å—Ö–æ–¥–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞")
                    with cols[1]:
                        mapping = st.selectbox(
                            "–¶–µ–ª–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞",
                            options=all_target_columns,
                            index=selected_idx,
                            key=f"unmap_{src_col}",
                            label_visibility="collapsed"
                        )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥
                    if mapping != "–ù–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å":
                        st.session_state.column_mapping[src_col] = mapping
                    elif src_col in st.session_state.column_mapping:
                        del st.session_state.column_mapping[src_col]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é
            total_src = len(st.session_state.source_columns)
            total_mapped = len(st.session_state.column_mapping)
            st.info(f"–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {total_mapped} –∏–∑ {total_src} –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫")
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞
            submitted = st.form_submit_button("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ")
            if submitted:
                st.session_state.mapping_complete = True
                st.success("–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                st.rerun()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞–ø–ø–∏–Ω–≥–∞
    if st.session_state.mapping_complete:
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π
        mapping_data = []
        for src_col, tgt_col in st.session_state.column_mapping.items():
            mapping_data.append({"–ò—Å—Ö–æ–¥–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞": src_col, "–¶–µ–ª–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞": tgt_col})
        
        if mapping_data:
            mapping_df = pd.DataFrame(mapping_data)
            st.dataframe(mapping_df, use_container_width=True)
        else:
            st.warning("–ù–µ—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫!")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
        if not st.session_state.transfer_complete:
            if st.button("üì§ –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö"):
                with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö..."):
                    try:
                        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        preview_df = preview_data(
                            st.session_state.source_data, 
                            st.session_state.target_data,
                            st.session_state.column_mapping,
                            st.session_state.source_file.name if st.session_state.source_file else None
                        )
                        st.session_state.preview_result = preview_df
                        st.session_state.transfer_complete = True
                        st.rerun()
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                        st.session_state.transfer_complete = False
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∏ –∫–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        if st.session_state.transfer_complete and st.session_state.preview_result is not None:
            st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            st.dataframe(st.session_state.preview_result.head(10), use_container_width=True)
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if st.button("üíæ –°–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"):
                with st.spinner("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è..."):
                    try:
                        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                        output = io.BytesIO()
                        
                        # –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –≤ —Ü–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        result_workbook = transfer_data_between_tables(
                            st.session_state.source_data,
                            st.session_state.target_workbook,
                            st.session_state.target_sheet_name,
                            st.session_state.column_mapping,
                            st.session_state.target_header_row,
                            st.session_state.source_file.name if st.session_state.source_file else None
                        )
                        
                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ BytesIO –±—É—Ñ–µ—Ä
                        result_workbook.save(output)
                        output.seek(0)
                        
                        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                        original_filename = st.session_state.target_file.name
                        filename_parts = os.path.splitext(original_filename)
                        output_filename = f"{filename_parts[0]}_–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π{filename_parts[1]}"
                        
                        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                            data=output,
                            file_name=output_filename,
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
                        
                        st.success(f"–§–∞–π–ª '{output_filename}' –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!")
                        
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –º–∞–ø–ø–∏–Ω–≥–∞ –∏ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ
        if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
            st.session_state.column_mapping = {}
            st.session_state.mapping_complete = False
            st.session_state.transfer_complete = False
            st.session_state.auto_mapped = False
            st.session_state.preview_result = None
            st.rerun()

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è
with st.expander("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"):
    st.markdown("""
    ### –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º:
    
    1. **–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤**:
       - –í –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç –≤–∑—è—Ç—ã –¥–∞–Ω–Ω—ã–µ
       - –í –ø—Ä–∞–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —Ñ–∞–π–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ
       - –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –ª–∏—Å—Ç—ã –≤ –∫–∞–∂–¥–æ–º —Ñ–∞–π–ª–µ
       - –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
    
    2. **–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫**:
       - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
       - –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
       - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
       - –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    
    3. **–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö**:
       - –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö"
       - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
       - –ù–∞–∂–º–∏—Ç–µ "–°–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    
    4. **–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ**:
       - –î–ª—è —Å–±—Ä–æ—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ "–°–±—Ä–æ—Å–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
    
    ### –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã:
    - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã Excel (.xlsx) –æ—Ç Ozon, Wildberries –∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Å—Ö–æ–¥—Å—Ç–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫–æ–ª–æ–Ω–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ê—Ä—Ç–∏–∫—É–ª" –∏ "–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞")
    - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–∏
    """)

# –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
st.divider()
st.caption("""
**–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏**: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤. 
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å Ozon, Wildberries –∏ –¥—Ä—É–≥–∏–º–∏ Excel-—à–∞–±–ª–æ–Ω–∞–º–∏. **–í–µ—Ä—Å–∏—è:** 1.0
""")
